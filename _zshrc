# .zshrc をコンパイルして .zshrc.zwc を生成するコマンド
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

[ ! -f ~/.hushlogin ] && touch ~/.hushlogin

#========================================================##
##================= リストの色つけの設定 =================##
##========================================================##
# ls等でカラー表示にする(Macの設定 Ubuntuの場合 以下のif文内で上書きされる)
alias ls='ls -G'
# Mac は LS_COLORS, Ubuntu等は LSCOLORS
export LS_COLORS='di=36:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
export LSCOLORS=gxfxcxdxbxegedabagacad
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# 補完候補にも色付き表示
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# kill の候補にも色付き表示
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'
###========================================================##
##====================== 補完の設定 ======================##
##========================================================##
autoload -Uz compinit && compinit
setopt correct  ## 入力しているコマンド名が間違っている場合にもしかして：を出す。
setopt auto_menu             # 補完キー連打で順に補完候補を自動で補完
setopt list_packed           # コンパクトに補完リストを表示
# 補完関数の表示を強化する
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' use-cache true        # 補完キャッシュ
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT
# マッチ種別を別々に表示
zstyle ':completion:*' group-name ''
##========================================================##
##==================== 予測補完の設定 ====================##
##========================================================##
autoload -U predict-on       # 履歴による予測入力 (man zshcontrib)
zle -N predict-on
zle -N predict-off
bindkey '^xp'  predict-on    # Ctrl+x p で予測オン
bindkey '^x^p' predict-off   # Ctrl+x Ctrl+p で予測オフ
##========================================================##
##====================== 履歴の設定 ======================##
##========================================================##
HISTFILE=$HOME/.zsh_history  # 履歴をファイルに保存する
HISTSIZE=100000              # メモリ内の履歴の数
SAVEHIST=100000              # 保存される履歴の数
setopt share_history         # 履歴を共有
setopt extended_history      # 履歴ファイルに開始時刻と経過時間を記録
#========================================================##
##=================== プロンプトの設定 ===================##
##========================================================##
autoload -U promptinit ; promptinit
autoload -U colors     ; colors
# 基本のプロンプト
PROMPT="%{$reset_color%}$ "
# [場所] プロンプト
PROMPT="%{$reset_color%}[%{$fg[red]%}%B%~%b%{$reset_color%}]$PROMPT"
# 名前@マシン名 プロンプト
# PROMPT="%{$reset_color%}%{$fg[green]%}$USER%{$reset_color%}@%{$fg[cyan]%}%m%{$reset_color%}$PROMPT"
# RPROMPT="%{$fg[green]%}[%*]%{$reset_color%}"
##========================================================##
##================ ディレクトリ移動の設定 ================##
##========================================================##
setopt interactive_comments  # コマンドラインでも # 以降をコメントと見なす

##========================================================##
##====================== 雑多な設定 ======================##
##========================================================##
setopt no_beep               # コマンド入力エラーでBeepを鳴らさない
setopt extended_glob

### peco用 ###

function peco-history-selection() {
    BUFFER=`history -n 1 | tac  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}

zle -N peco-history-selection
bindkey '^R' peco-history-selection

##========================================================##
##====================== エイリアスの設定 ================##
##========================================================##

alias e='emacs'
alias v='vim'
alias g='git'

alias ll='ls -artlFh'
# Mac だとGオプション？
# alias ll='ls -rtlG'
alias la='ls -A'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'

# alias -s の力で あらゆる圧縮ファイルを
# ~$ ./test.zip
# ~$ ./test.tar.gz
# みたいな感じで解凍
function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -d $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
  esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract

### screen の設定 ### 
# シェルレベル１の時にのみscreenコマンド叩く(多重起動防止)
# if [ $SHLVL = 1 ];then
  # screen -d -R
# fi

# zsh でウィンドウ名に ホスト名とコマンド名を表示する
preexec() {
    mycmd=(${(s: :)${1}})
    echo -ne "\ek$(hostname|awk 'BEGIN{FS="."}{print $1}'):$mycmd[1]\e\\"
}

precmd() {
    echo -ne "\ek$(hostname|awk 'BEGIN{FS="."}{print $1}'):idle\e\\"
}

#if [ $SHLVL = 1 ]; then
#  tmux attach || tmux -f $HOME/.tmux.conf
#fi
